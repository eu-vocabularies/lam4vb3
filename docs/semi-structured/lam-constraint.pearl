prefix  xsd:    <http://www.w3.org/2001/XMLSchema#>
prefix  rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix  dct:    <http://purl.org/dc/terms/>
prefix  coda:   <http://art.uniroma2.it/coda/contracts/>
prefix skosxl:  <http://www.w3.org/2008/05/skos-xl#>
prefix  codaImpl:   <http://art.uniroma2.it/coda/converters/>
prefix euvoc: <http://publications.europa.eu/ontology/euvoc#>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix cdm: <http://publications.europa.eu/ontology/cdm#>
prefix lam: <http://publications.europa.eu/resources/authority/lam/>
 
rule it.uniroma2.art.semanticturkey.customform id:lamShape {
    nodes = {
        shapeId uri(coda:randIdGen("sh", {})) .
        path uri userPrompt/path_uri .
        lang literal userPrompt/lang .
        nameLiteral literal(coda:langString($lang)) userPrompt/name .
        descriptionLiteral literal(coda:langString($lang)) userPrompt/description .
        minCar literal^^xsd:integer userPrompt/mininum_cardinality .
        maxCar literal^^xsd:integer userPrompt/maximum_cardinality .       
        rangeClass uri userPrompt/range_class .
        rangeDatatype uri userPrompt/range_data_type .
        rangeValue literal userPrompt/has_value .
        annotatedWithProperty uri userPrompt/annotated_with_property .
        annotationPropertyRange uri userPrompt/range_of_annotation_property .
    }
    graph = {
        $shapeId a sh:PropertyShape .
        $shapeId sh:path $path .
        $shapeId sh:name $nameLiteral .
         
        OPTIONAL{
                $shapeId sh:description $descriptionLiteral  .             
                $shapeId sh:minCount $minCar .
                $shapeId sh:maxCount $maxCar .
 
                $shapeId sh:hasValue $rangeClass .
                $shapeId sh:hasValue $rangeDatatype .
                $shapeId sh:hasValue $rangeValue .
                $shapeId sh:hasValue $annotatedWithProperty .
                $shapeId sh:hasValue $annotationPropertyRange .
        }      
         
    }
}
